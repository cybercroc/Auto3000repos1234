//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
namespace Auto3000.Models
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class Entities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new Entities object using the connection string found in the 'Entities' section of the application configuration file.
        /// </summary>
        public Entities() : base("name=Entities", "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Entities object.
        /// </summary>
        public Entities(string connectionString) : base(connectionString, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Entities object.
        /// </summary>
        public Entities(EntityConnection connection) : base(connection, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userName">No Metadata Documentation available.</param>
        /// <param name="password">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> usp_tblAdminUser_sel(global::System.String userName, global::System.String password)
        {
            ObjectParameter userNameParameter;
            if (userName != null)
            {
                userNameParameter = new ObjectParameter("UserName", userName);
            }
            else
            {
                userNameParameter = new ObjectParameter("UserName", typeof(global::System.String));
            }
    
            ObjectParameter passwordParameter;
            if (password != null)
            {
                passwordParameter = new ObjectParameter("Password", password);
            }
            else
            {
                passwordParameter = new ObjectParameter("Password", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("usp_tblAdminUser_sel", userNameParameter, passwordParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="announcementId">No Metadata Documentation available.</param>
        /// <param name="title">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="isActive">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> usp_tblAppointment_ins(Nullable<global::System.Int32> announcementId, global::System.String title, global::System.String description, Nullable<global::System.Boolean> isActive)
        {
            ObjectParameter announcementIdParameter;
            if (announcementId.HasValue)
            {
                announcementIdParameter = new ObjectParameter("AnnouncementId", announcementId);
            }
            else
            {
                announcementIdParameter = new ObjectParameter("AnnouncementId", typeof(global::System.Int32));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("Title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("Title", typeof(global::System.String));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter isActiveParameter;
            if (isActive.HasValue)
            {
                isActiveParameter = new ObjectParameter("IsActive", isActive);
            }
            else
            {
                isActiveParameter = new ObjectParameter("IsActive", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("usp_tblAppointment_ins", announcementIdParameter, titleParameter, descriptionParameter, isActiveParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="announcementId">No Metadata Documentation available.</param>
        public ObjectResult<usp_tblAppointment_sel_Result> usp_tblAppointment_sel(Nullable<global::System.Int32> announcementId)
        {
            ObjectParameter announcementIdParameter;
            if (announcementId.HasValue)
            {
                announcementIdParameter = new ObjectParameter("AnnouncementId", announcementId);
            }
            else
            {
                announcementIdParameter = new ObjectParameter("AnnouncementId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<usp_tblAppointment_sel_Result>("usp_tblAppointment_sel", announcementIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="announcementId">No Metadata Documentation available.</param>
        public int usp_tblAppointment_del(Nullable<global::System.Int32> announcementId)
        {
            ObjectParameter announcementIdParameter;
            if (announcementId.HasValue)
            {
                announcementIdParameter = new ObjectParameter("AnnouncementId", announcementId);
            }
            else
            {
                announcementIdParameter = new ObjectParameter("AnnouncementId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("usp_tblAppointment_del", announcementIdParameter);
        }

        #endregion

    }

    #endregion

    #region ComplexTypes
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="Auto3000Model", Name="usp_tblAppointment_sel_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class usp_tblAppointment_sel_Result : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new usp_tblAppointment_sel_Result object.
        /// </summary>
        /// <param name="announcementId">Initial value of the AnnouncementId property.</param>
        /// <param name="expiryDate">Initial value of the ExpiryDate property.</param>
        public static usp_tblAppointment_sel_Result Createusp_tblAppointment_sel_Result(global::System.Int32 announcementId, global::System.DateTime expiryDate)
        {
            usp_tblAppointment_sel_Result usp_tblAppointment_sel_Result = new usp_tblAppointment_sel_Result();
            usp_tblAppointment_sel_Result.AnnouncementId = announcementId;
            usp_tblAppointment_sel_Result.ExpiryDate = expiryDate;
            return usp_tblAppointment_sel_Result;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AnnouncementId
        {
            get
            {
                return _AnnouncementId;
            }
            set
            {
                OnAnnouncementIdChanging(value);
                ReportPropertyChanging("AnnouncementId");
                _AnnouncementId = StructuralObject.SetValidValue(value, "AnnouncementId");
                ReportPropertyChanged("AnnouncementId");
                OnAnnouncementIdChanged();
            }
        }
        private global::System.Int32 _AnnouncementId;
        partial void OnAnnouncementIdChanging(global::System.Int32 value);
        partial void OnAnnouncementIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ExpiryDate
        {
            get
            {
                return _ExpiryDate;
            }
            set
            {
                OnExpiryDateChanging(value);
                ReportPropertyChanging("ExpiryDate");
                _ExpiryDate = StructuralObject.SetValidValue(value, "ExpiryDate");
                ReportPropertyChanged("ExpiryDate");
                OnExpiryDateChanged();
            }
        }
        private global::System.DateTime _ExpiryDate;
        partial void OnExpiryDateChanging(global::System.DateTime value);
        partial void OnExpiryDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, true, "Title");
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsActive;
        partial void OnIsActiveChanging(Nullable<global::System.Boolean> value);
        partial void OnIsActiveChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

    }

    #endregion

}
